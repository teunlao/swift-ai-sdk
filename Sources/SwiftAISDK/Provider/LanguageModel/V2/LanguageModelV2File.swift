import Foundation

/**
 A file that has been generated by the model.
 Generated files as base64 encoded strings or binary data.
 The files should be returned without any unnecessary conversion.

 TypeScript equivalent:
 ```typescript
 export type LanguageModelV2File = {
   type: 'file';
   mediaType: string;
   data: string | Uint8Array;
 };
 ```
 */
public struct LanguageModelV2File: Sendable, Equatable, Codable {
    public let type: String = "file"

    /// The IANA media type of the file, e.g. `image/png` or `audio/mp3`.
    /// @see https://www.iana.org/assignments/media-types/media-types.xhtml
    public let mediaType: String

    /// Generated file data as base64 encoded strings or binary data.
    /// The file data should be returned without any unnecessary conversion.
    /// If the API returns base64 encoded strings, the file data should be returned
    /// as base64 encoded strings. If the API returns binary data, the file data should
    /// be returned as binary data.
    public let data: LanguageModelV2FileData

    public init(mediaType: String, data: LanguageModelV2FileData) {
        self.mediaType = mediaType
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case type
        case mediaType
        case data
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        mediaType = try container.decode(String.self, forKey: .mediaType)
        data = try container.decode(LanguageModelV2FileData.self, forKey: .data)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(type, forKey: .type)
        try container.encode(mediaType, forKey: .mediaType)
        try container.encode(data, forKey: .data)
    }
}

/// File data: either base64 string or binary data (Uint8Array equivalent)
public enum LanguageModelV2FileData: Sendable, Equatable, Codable {
    case base64(String)
    case binary(Data)

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let string = try? container.decode(String.self) {
            self = .base64(string)
        } else if let data = try? container.decode(Data.self) {
            self = .binary(data)
        } else {
            throw DecodingError.dataCorruptedError(
                in: container,
                debugDescription: "Expected String or Data for file data"
            )
        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case .base64(let string):
            try container.encode(string)
        case .binary(let data):
            try container.encode(data)
        }
    }
}
