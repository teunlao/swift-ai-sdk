import Foundation

/**
 Result of a tool call that has been executed by the provider.

 TypeScript equivalent:
 ```typescript
 export type LanguageModelV2ToolResult = {
   type: 'tool-result';
   toolCallId: string;
   toolName: string;
   result: unknown;
   isError?: boolean;
   providerExecuted?: boolean;
   providerMetadata?: SharedV2ProviderMetadata;
 };
 ```
 */
public struct LanguageModelV2ToolResult: Sendable, Equatable, Codable {
    public let type: String = "tool-result"

    /// The ID of the tool call that this result is associated with.
    public let toolCallId: String

    /// Name of the tool that generated this result.
    public let toolName: String

    /// Result of the tool call. This is a JSON-serializable object.
    public let result: JSONValue

    /// Optional flag if the result is an error or an error message.
    public let isError: Bool?

    /// Whether the tool result was generated by the provider.
    /// If this flag is set to true, the tool result was generated by the provider.
    /// If this flag is not set or is false, the tool result was generated by the client.
    public let providerExecuted: Bool?

    /// Additional provider-specific metadata for the tool result.
    public let providerMetadata: SharedV2ProviderMetadata?

    public init(
        toolCallId: String,
        toolName: String,
        result: JSONValue,
        isError: Bool? = nil,
        providerExecuted: Bool? = nil,
        providerMetadata: SharedV2ProviderMetadata? = nil
    ) {
        self.toolCallId = toolCallId
        self.toolName = toolName
        self.result = result
        self.isError = isError
        self.providerExecuted = providerExecuted
        self.providerMetadata = providerMetadata
    }

    private enum CodingKeys: String, CodingKey {
        case type
        case toolCallId
        case toolName
        case result
        case isError
        case providerExecuted
        case providerMetadata
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        toolCallId = try container.decode(String.self, forKey: .toolCallId)
        toolName = try container.decode(String.self, forKey: .toolName)
        result = try container.decode(JSONValue.self, forKey: .result)
        isError = try container.decodeIfPresent(Bool.self, forKey: .isError)
        providerExecuted = try container.decodeIfPresent(Bool.self, forKey: .providerExecuted)
        providerMetadata = try container.decodeIfPresent(SharedV2ProviderMetadata.self, forKey: .providerMetadata)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(type, forKey: .type)
        try container.encode(toolCallId, forKey: .toolCallId)
        try container.encode(toolName, forKey: .toolName)
        try container.encode(result, forKey: .result)
        try container.encodeIfPresent(isError, forKey: .isError)
        try container.encodeIfPresent(providerExecuted, forKey: .providerExecuted)
        try container.encodeIfPresent(providerMetadata, forKey: .providerMetadata)
    }
}
