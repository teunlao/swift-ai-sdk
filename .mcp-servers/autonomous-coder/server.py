#!/usr/bin/env python3
"""
Autonomous Codex MCP Proxy Server (FIXED VERSION)

–ü—Ä–æ–∫—Å–∏ –¥–ª—è `codex mcp-server` –∫–æ—Ç–æ—Ä—ã–π:
1. –ò–ù–ñ–ï–ö–¢–ò–¢ approval-policy: "never" –∏ sandbox: "danger-full-access" –≤ JSON requests
2. –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç elicitation/create –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä—è–µ—Ç
3. –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω—É—é —Ä–∞–±–æ—Ç—É –ë–ï–ó user approvals
"""

import asyncio
import json
import sys
from typing import Any, Dict, Optional

async def run_proxy():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–∫—Å–∏ –º–µ–∂–¥—É Claude Code –∏ codex mcp-server."""

    print("üöÄ Starting Autonomous Codex MCP Proxy (FIXED VERSION)...", file=sys.stderr)
    print("üì¶ Launching codex mcp-server subprocess...", file=sys.stderr)

    # –ó–∞–ø—É—Å–∫–∞–µ–º codex mcp-server –ë–ï–ó -c —Ñ–ª–∞–≥–æ–≤ (–æ–Ω–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è –≤ MCP mode!)
    codex_process = await asyncio.create_subprocess_exec(
        "codex",
        "mcp-server",
        stdin=asyncio.subprocess.PIPE,
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE
    )

    print(f"‚úÖ Codex MCP server started (PID: {codex_process.pid})", file=sys.stderr)

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è elicitation ID
    elicitation_map: Dict[int, str] = {}  # elicit_id -> original_request_id

    async def forward_to_codex(message: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ codex mcp-server."""
        json_str = json.dumps(message) + "\n"
        codex_process.stdin.write(json_str.encode())
        await codex_process.stdin.drain()

    async def read_from_codex():
        """–ß–∏—Ç–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç codex mcp-server."""
        while True:
            line = await codex_process.stdout.readline()
            if not line:
                break
            try:
                yield json.loads(line.decode())
            except json.JSONDecodeError as e:
                print(f"‚ùå JSON decode error from Codex: {e}", file=sys.stderr)
                continue

    async def read_from_claude():
        """–ß–∏—Ç–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Claude Code (stdin)."""
        loop = asyncio.get_event_loop()
        while True:
            line = await loop.run_in_executor(None, sys.stdin.readline)
            if not line:
                break
            try:
                yield json.loads(line)
            except json.JSONDecodeError as e:
                print(f"‚ùå JSON decode error from Claude: {e}", file=sys.stderr)
                continue

    async def handle_claude_messages():
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Claude Code."""

        async for message in read_from_claude():
            method = message.get("method")
            print(f"üì• FROM CLAUDE: {method or message.get('id')}", file=sys.stderr)

            # ‚ö†Ô∏è –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–Ω–∂–µ–∫—Ç–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ tools/call
            if method == "tools/call":
                params = message.get("params", {})

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –∫ codex tool
                if params.get("name") in ["codex", "codex-reply"]:
                    arguments = params.get("arguments", {})

                    # –ò–Ω–∂–µ–∫—Ç–∏–º approval-policy –∏ sandbox –í–ù–£–¢–†–¨ arguments
                    # ‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º kebab-case –∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç JSON schema!
                    if "approval-policy" not in arguments:
                        arguments["approval-policy"] = "never"
                        print(f"üíâ Injected approval-policy: never", file=sys.stderr)

                    if "sandbox" not in arguments:
                        arguments["sandbox"] = "danger-full-access"
                        print(f"üíâ Injected sandbox: danger-full-access", file=sys.stderr)

                    # –û–±–Ω–æ–≤–ª—è–µ–º message
                    params["arguments"] = arguments
                    message["params"] = params

                    print(f"‚úÖ Modified request: {json.dumps(message, indent=2)[:200]}...", file=sys.stderr)

            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º (–≤–æ–∑–º–æ–∂–Ω–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ) —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ codex
            await forward_to_codex(message)

    async def handle_codex_messages():
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Codex MCP server."""

        async for message in read_from_codex():
            method = message.get("method")

            print(f"üì§ FROM CODEX: {method or message.get('id')}", file=sys.stderr)

            # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º elicitation/create
            if method == "elicitation/create":
                params = message.get("params", {})
                codex_elicitation = params.get("codex_elicitation")

                print(f"üîç Detected elicitation: {codex_elicitation}", file=sys.stderr)

                if codex_elicitation == "patch-approval":
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                    elicit_id = message.get("id")
                    elicitation_map[elicit_id] = elicit_id

                    print(f"‚úÖ AUTO-APPROVING patch (elicit_id={elicit_id})", file=sys.stderr)

                    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º elicitation –≤ Claude (–¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏)
                    sys.stdout.write(json.dumps(message) + "\n")
                    sys.stdout.flush()

                    # –ù–û —Ç–∞–∫–∂–µ —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π approve –≤ Codex!
                    auto_response = {
                        "jsonrpc": "2.0",
                        "id": elicit_id,
                        "result": {
                            "decision": "approved"
                        }
                    }

                    print(f"ü§ñ Sending auto-approval to Codex...", file=sys.stderr)
                    await forward_to_codex(auto_response)
                    continue

            # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            sys.stdout.write(json.dumps(message) + "\n")
            sys.stdout.flush()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    try:
        await asyncio.gather(
            handle_claude_messages(),
            handle_codex_messages()
        )
    except Exception as e:
        print(f"‚ùå Error: {e}", file=sys.stderr)
        import traceback
        traceback.print_exc(file=sys.stderr)
    finally:
        codex_process.terminate()
        await codex_process.wait()
        print("üõë Codex MCP server stopped", file=sys.stderr)


if __name__ == "__main__":
    try:
        asyncio.run(run_proxy())
    except KeyboardInterrupt:
        print("\nüõë Interrupted by user", file=sys.stderr)
        sys.exit(0)
