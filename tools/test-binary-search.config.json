{
  "$comment": "Binary search for problematic tests. Add/remove test suites from 'tests' array to exclude them. When tests pass, you found the culprit!",

  "mode": "exclude",
  "parallel": false,
  "verbose": false,

  "exclude": [
    "SwiftAISDKTests.EmbedManyTests/*",
    "SwiftAISDKTests.EmbedTests/*"
  ],

  "$available_suites": [
    "SwiftAISDKTests.AsArrayTests/*",
    "SwiftAISDKTests.ConsumeStreamTests/*",
    "SwiftAISDKTests.ConvertToLanguageModelMessageTests/*",
    "SwiftAISDKTests.ConvertToLanguageModelPromptTests/*",
    "SwiftAISDKTests.CosineSimilarityTests/*",
    "SwiftAISDKTests.CreateTextStreamResponseTests/*",
    "SwiftAISDKTests.CreateToolModelOutputTests/*",
    "SwiftAISDKTests.CreateUIMessageStreamResponseTests/*",
    "SwiftAISDKTests.CreateUIMessageStreamTests/*",
    "SwiftAISDKTests.DefaultSettingsMiddlewareTests/*",
    "SwiftAISDKTests.DetectMediaTypeTests/*",
    "SwiftAISDKTests.DownloadTests/*",
    "SwiftAISDKTests.EmbedManyTests/*",
    "SwiftAISDKTests.EmbedTests/*",
    "SwiftAISDKTests.FixJsonTests/*",
    "SwiftAISDKTests.GenerateImageTests/*",
    "SwiftAISDKTests.GenerateSpeechTests/*",
    "SwiftAISDKTests.GenerateTextAdvancedTests/*",
    "SwiftAISDKTests.GenerateTextResultTests/*",
    "SwiftAISDKTests.GenerateTextTests/*",
    "SwiftAISDKTests.GetResponseUIMessageIDTests/*",
    "SwiftAISDKTests.HandleUIMessageStreamFinishTests/*",
    "SwiftAISDKTests.IsDeepEqualDataTests/*",
    "SwiftAISDKTests.IsNonEmptyObjectTests/*",
    "SwiftAISDKTests.JSONRPCMessageTests/*",
    "SwiftAISDKTests.JsonToSSETransformStreamTests/*",
    "SwiftAISDKTests.LogWarningsTests/*",
    "SwiftAISDKTests.MCPTransportTests/*",
    "SwiftAISDKTests.MCPTypesTests/*",
    "SwiftAISDKTests.MergeObjectsTests/*",
    "SwiftAISDKTests.MockLanguageModelTests/*",
    "SwiftAISDKTests.MockMCPTransportTests/*",
    "SwiftAISDKTests.OutputTests/*",
    "SwiftAISDKTests.ParsePartialJsonTests/*",
    "SwiftAISDKTests.ParseToolCallTests/*",
    "SwiftAISDKTests.PipeTextStreamToResponseTests/*",
    "SwiftAISDKTests.PipeUIMessageStreamToResponseTests/*",
    "SwiftAISDKTests.PrepareCallSettingsTests/*",
    "SwiftAISDKTests.PrepareHeadersTests/*",
    "SwiftAISDKTests.PrepareRetriesTests/*",
    "SwiftAISDKTests.PrepareToolsAndToolChoiceTests/*",
    "SwiftAISDKTests.ReadUIMessageStreamTests/*",
    "SwiftAISDKTests.ResolveEmbeddingModelTests/*",
    "SwiftAISDKTests.ResolveLanguageModelTests/*",
    "SwiftAISDKTests.RetryWithExponentialBackoffTests/*",
    "SwiftAISDKTests.RunToolsTransformationTests_DISABLED/*",
    "SwiftAISDKTests.SelectTelemetryAttributesTests/*",
    "SwiftAISDKTests.SerialJobExecutorTests/*",
    "SwiftAISDKTests.SimulateReadableStreamTests/*",
    "SwiftAISDKTests.SmoothStreamTests/*",
    "SwiftAISDKTests.SplitArrayTests/*",
    "SwiftAISDKTests.StandardizePromptTests/*",
    "SwiftAISDKTests.StringifyForTelemetryTests/*",
    "SwiftAISDKTests.ToResponseMessagesTests/*",
    "SwiftAISDKTests.TranscribeTests/*",
    "SwiftAISDKTests.UIMessageChunkTests/*",
    "SwiftAISDKTests.WrapGatewayErrorTests/*",
    "SwiftAISDKTests.WrapLanguageModelTests/*",
    "SwiftAISDKTests.example/*"
  ],

  "$instructions": "BINARY SEARCH INSTRUCTIONS:\n1. Start by excluding the first half of test suites (move them from $available_suites to tests array)\n2. Run: timeout 10 node tools/test-runner.js --config tools/test-binary-search.config.json\n3. If it hangs -> problem is in remaining tests, exclude second half instead\n4. If it passes -> problem is in excluded tests, split excluded list in half\n5. Repeat until you find the exact problematic test suite"
}
